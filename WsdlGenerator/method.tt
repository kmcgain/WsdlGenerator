<#@ import namespace="Microsoft.VisualStudio.TextTemplating" #>
<#+
class MethodTemplate : TextTransformation, CSTemplate
{
	private MemberDescription member;
	private string parameters;
	private string baseParameters;

	public MethodTemplate(MemberDescription memberDescription)
	{
		this.member = memberDescription;
		this.parameters = string.Empty;
		this.baseParameters = string.Empty;
		
		setParameters();
		setBaseParameters();
	}
	
	private void setBaseParameters()
	{
		if (member.BaseCallArgs == null || member.BaseCallArgs.Count == 0)
		{
			return;
		}
		
		ArgumentDescription lastArg = member.BaseCallArgs[member.BaseCallArgs.Count-1];
		foreach (ArgumentDescription argument in member.BaseCallArgs)
		{
			this.baseParameters += argument.ToString(); 
			if (argument != lastArg)
				this.baseParameters += ", ";
		}
	}
	
	private void setParameters()
	{
		if (member.Arguments == null || member.Arguments.Count == 0)
			return;
			
		MemberDescription.ArgumentDefinition lastArg = member.Arguments[member.Arguments.Count-1];
		foreach (MemberDescription.ArgumentDefinition argument in member.Arguments)
		{
			this.parameters += argument.Type + " " + argument.Name; 
			if (argument != lastArg)
				this.parameters += ", ";
		}
	}

	protected virtual void WriteBody()
	{
		if (string.IsNullOrEmpty(member.Body))
			return;
			
		#><#= member.Body #>
<#+		
	}

	protected virtual void WriteAttributes()
	{
		if (member.Attributes == null || member.Attributes.Count == 0)
			return;

		foreach (AttributeDescription attribute in member.Attributes)
		{
			Write(new AttributeTemplate(attribute.Name, attribute.Arguments).TransformText());
		}
	}

	protected virtual void WriteComments()
	{
	}

	public override string TransformText()
	{
#>
<#+
	WriteComments();
	WriteAttributes();
#>
<#= member.Scope == MemberDescription.MethodScopeValues.None ? string.Empty : member.Scope.ToString("G").ToLower() + " " 
#><#=  member.IsVirtual ? "virtual " : string.Empty 
#><#= member.Type == null ? string.Empty : member.Type + " " #><#= member.Name #>(<#= parameters #>)<#+ 
if (!member.HasBody) 
{ 
	Write(";\n"); 
} 
else 
{#>
<#+
	if (member.HasBaseCall)
	{
		Write(string.Format(" :\n\t\t\tbase({0})", baseParameters));
	}
#>

{
<#+
	PushIndent("    ");
	WriteBody();
	PopIndent();
#>
}
<#+
		}// END Else
		return GenerationEnvironment.ToString();
	}
}

#>